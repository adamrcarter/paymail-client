{"version":3,"file":"paymail-client.esm.js","sources":["../src/brfc.js","../src/constants.js","../src/dns-client.js","../src/dns-over-https.js","../src/http.js","../src/EndpointResolver.js","../src/VerifiableMessage.js","../src/RequestBodyFactory.js","../src/Clock.js","../src/errors/PaymailNotFound.js","../src/BrowserDns.js","../src/PaymailClient.js"],"sourcesContent":["// 'use strict';\n\n// Object.defineProperty(exports, '__esModule', { value: true });\n\n// function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\n// var bsv = _interopDefault(require('bsv'));\n\n// const brfc = (title, authors, version) => {\n//   const autorString = authors.join(', ').trim();\n//   const stringToHash = [title.trim() + autorString + (version.toString() || '')].join('').trim();\n//   let hash = bsv.Hash.sha256Sha256(Buffer.from(stringToHash));\n//   hash = hash.reverse();\n//   return hash.toString('hex').substring(0, 12);\n// };\n\n// exports.brfc = brfc;\n// //# sourceMappingURL=brfc.cjs.js.map\n\nconst bsv = require('bsv');\n\nconsole.log(bsv)\n\nconst brfc = (title, authors, version) => {\n  const autorString = authors.join(', ').trim();\n  const stringToHash = [title.trim() + autorString + (version.toString() || '')].join('').trim();\n  let hash = bsv.crypto.Hash.sha256sha256(Buffer.from(stringToHash));\n  hash = hash.reverse();\n  return hash.toString('hex').substring(0, 12);\n};\n\nexport { brfc };","import { brfc } from './brfc'\r\n\r\nexport const CapabilityCodes = {\r\n  pki: 'pki',\r\n  paymentDestination: 'paymentDestination',\r\n  requestSenderValidation: brfc(\r\n    'bsvalias Payment Addressing (Payer Validation)',\r\n    ['andy (nChain)'],\r\n    ''\r\n  ),\r\n  verifyPublicKeyOwner: brfc(\r\n    'bsvalias public key verify (Verify Public Key Owner)',\r\n    [],\r\n    ''\r\n  ),\r\n  publicProfile: brfc(\r\n    'Public Profile (Name & Avatar)',\r\n    ['Ryan X. Charles (Money Button)'],\r\n    '1'\r\n  ),\r\n  receiveTransaction: brfc(\r\n    'Send raw transaction',\r\n    ['Miguel Duarte (Money Button)', 'Ryan X. Charles (Money Button)', 'Ivan Mlinaric (Handcash)', 'Rafa (Handcash)'],\r\n    '1.1'\r\n  ),\r\n  p2pPaymentDestination: brfc(\r\n    'Get no monitored payment destination (p2p payment destination)',\r\n    ['Miguel Duarte (Money Button)', 'Ryan X. Charles (Money Button)', 'Ivan Mlinaric (Handcash)', 'Rafa (Handcash)'],\r\n    '1.1'\r\n  )\r\n}\r\n","// import { DnsOverHttps } from \"./dns-over-https\"\r\n\r\nclass DnsClient {\r\n  constructor (dns, doh) {\r\n    this.dns = dns\r\n    this.doh = doh\r\n  }\r\n\r\n  async checkSrv (aDomain) {\r\n    return new Promise((resolve, reject) => {\r\n      this.dns.resolveSrv(`_bsvalias._tcp.${aDomain}`, async (err, result) => {\r\n        try {\r\n          if (err && (err.code === 'ENODATA' || err.code === 'ENOTFOUND')) {\r\n            return resolve({\r\n              domain: aDomain,\r\n              port: 443,\r\n              isSecure: true\r\n            })\r\n          }\r\n          if (err) {\r\n            return reject(err)\r\n          }\r\n\r\n          const { name: domainFromDns, port, isSecure } = result[0]\r\n          resolve({\r\n            domain: domainFromDns,\r\n            port,\r\n            isSecure: this.checkDomainIsSecure(domainFromDns, aDomain) || isSecure\r\n          })\r\n        } catch (err) {\r\n          return reject(err)\r\n        }\r\n      })\r\n    }).then(result => {\r\n      if (result.isSecure) {\r\n        return result\r\n      } else {\r\n        return this.validateDnssec(aDomain)\r\n      }\r\n    }, (err) => {\r\n      console.error(err)\r\n      return err\r\n    })\r\n  }\r\n\r\n  checkDomainIsSecure (srvResponseDomain, originalDomain) {\r\n    if (this.domainsAreEqual(srvResponseDomain, originalDomain)) {\r\n      return true\r\n    } else if (this.responseIsWwwSubdomain(srvResponseDomain, originalDomain)) {\r\n      return true\r\n    } else if (this.isHandcashDomain(originalDomain)) { // tell rafa to fix handcash and we can remove the special case :)\r\n      return this.domainsAreEqual('handcash-paymail-production.herokuapp.com', srvResponseDomain) || this.domainsAreEqual('handcash-cloud-production.herokuapp.com', srvResponseDomain)\r\n    } else if (this.isHandcashInternalDomain(originalDomain)) {\r\n      return this.domainsAreEqual('handcash-cloud-staging.herokuapp.com', srvResponseDomain)\r\n    } else if (this.domainsAreEqual('localhost', srvResponseDomain)) {\r\n      return true\r\n    } else if (this.isMoneyButtonDomain(srvResponseDomain)) {\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  isMoneyButtonDomain (aDomain) {\r\n    return this.domainsAreEqual(aDomain, 'moneybutton.com') || this.domainsAreEqual(aDomain, 'www.moneybutton.com')\r\n  }\r\n\r\n  responseIsWwwSubdomain (srvResponseDomain, originalDomain) {\r\n    return this.domainsAreEqual(srvResponseDomain, `www.${originalDomain}`)\r\n  }\r\n\r\n  isHandcashDomain (aDomain) {\r\n    return this.domainsAreEqual('handcash.io', aDomain)\r\n  }\r\n\r\n  isHandcashInternalDomain (aDomain) {\r\n    return this.domainsAreEqual('internal.handcash.io', aDomain)\r\n  }\r\n\r\n  async validateDnssec (aDomain) {\r\n    const dnsResponse = await this.doh.queryBsvaliasDomain(aDomain)\r\n    if (dnsResponse.Status !== 0 || !dnsResponse.Answer) {\r\n      throw new Error(`Insecure domain.`)\r\n    }\r\n    const data = dnsResponse.Answer[0].data.split(' ')\r\n    const port = data[2]\r\n    const responseDomain = data[3]\r\n    if (!dnsResponse.AD && !this.domainsAreEqual(aDomain, responseDomain)) {\r\n      throw new Error(`Insecure domain.`)\r\n    }\r\n    return {\r\n      port,\r\n      domain: responseDomain,\r\n      isSecure: dnsResponse.AD\r\n    }\r\n  }\r\n\r\n  domainsAreEqual (domain1, domain2) {\r\n    return domain1.replace(/\\.$/, '') === domain2.replace(/\\.$/, '')\r\n  }\r\n}\r\n\r\nexport { DnsClient }\r\n","class DnsOverHttps {\r\n  constructor (fetch, config) {\r\n    this.fetch = fetch\r\n    this.config = config\r\n  }\r\n\r\n  async resolveSrv (aDomain) {\r\n    const response = await this.fetch(`${this.config.baseUrl}?name=${aDomain}&type=SRV&cd=0`)\r\n    const body = await response.json()\r\n    return body\r\n  }\r\n\r\n  async queryBsvaliasDomain (aDomain) {\r\n    return this.resolveSrv(`_bsvalias._tcp.${aDomain}`)\r\n  }\r\n}\r\n\r\nexport { DnsOverHttps }\r\n","import AbortController from 'abort-controller'\r\n\r\nclass Http {\r\n  constructor (fetch) {\r\n    this.fetch = fetch\r\n  }\r\n\r\n  async get (url) {\r\n    return this._basicRequest(url)\r\n  }\r\n\r\n  async postJson (url, body) {\r\n    return this._basicRequest(url, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(body)\r\n    })\r\n  }\r\n\r\n  async _basicRequest (url, options = {}) {\r\n    var controller = new AbortController()\r\n    const timer = setTimeout(() => controller.abort(), 30000)\r\n    return this.fetch(url, {\r\n      ...options,\r\n      credentials: 'omit',\r\n      signal: controller.signal\r\n    }).then(result => {\r\n      clearTimeout(timer)\r\n      return result\r\n    })\r\n  }\r\n}\r\n\r\nexport { Http }\r\n","import { CapabilityCodes } from './constants'\r\nimport { DnsClient } from './dns-client'\r\nimport { DnsOverHttps } from './dns-over-https'\r\nimport { Http } from './http'\r\n\r\nclass EndpointResolver {\r\n  constructor (dns = null, fetch) {\r\n    this.dnsClient = new DnsClient(dns, new DnsOverHttps(fetch, { baseUrl: 'https://dns.google.com/resolve' }))\r\n\r\n    this.http = new Http(fetch)\r\n    this._cache = {}\r\n  }\r\n\r\n  static create (dnsClient, fetch) {\r\n    const instance = new EndpointResolver(null, fetch)\r\n    instance.dnsClient = dnsClient\r\n    return instance\r\n  }\r\n\r\n  async getIdentityUrlFor (aPaymail) {\r\n    const [alias, domain] = aPaymail.split('@')\r\n    await this.ensureCapabilityFor(domain, CapabilityCodes.pki)\r\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\r\n    const identityUrl = apiDescriptor.capabilities.pki\r\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\r\n    return identityUrl\r\n  }\r\n\r\n  async getAddressUrlFor (aPaymail) {\r\n    const [ alias, domain ] = aPaymail.split('@')\r\n    await this.ensureCapabilityFor(domain, CapabilityCodes.paymentDestination)\r\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\r\n    const addressUrl = apiDescriptor.capabilities.paymentDestination\r\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\r\n    return addressUrl\r\n  }\r\n\r\n  async getVerifyUrlFor (aPaymail, aPubkey) {\r\n    const [ alias, domain ] = aPaymail.split('@')\r\n    await this.ensureCapabilityFor(domain, CapabilityCodes.verifyPublicKeyOwner)\r\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\r\n    const url = apiDescriptor.capabilities[CapabilityCodes.verifyPublicKeyOwner]\r\n      .replace('{alias}', alias).replace('{domain.tld}', domain).replace('{pubkey}', aPubkey)\r\n    return url\r\n  }\r\n\r\n  async getPublicProfileUrlFor (aPaymail) {\r\n    const [ alias, domain ] = aPaymail.split('@')\r\n    await this.ensureCapabilityFor(domain, CapabilityCodes.publicProfile)\r\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\r\n    const url = apiDescriptor.capabilities[CapabilityCodes.publicProfile]\r\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\r\n    return url\r\n  }\r\n\r\n  async getSendTxUrlFor (aPaymail) {\r\n    const [ alias, domain ] = aPaymail.split('@')\r\n    await this.ensureCapabilityFor(domain, CapabilityCodes.receiveTransaction)\r\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\r\n    const url = apiDescriptor.capabilities[CapabilityCodes.receiveTransaction]\r\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\r\n    return url\r\n  }\r\n\r\n  async getP2pPatmentDestinationUrlFor (aPaymail) {\r\n    const [ alias, domain ] = aPaymail.split('@')\r\n    await this.ensureCapabilityFor(domain, CapabilityCodes.p2pPaymentDestination)\r\n    const apiDescriptor = await this.getApiDescriptionFor(domain)\r\n    const url = apiDescriptor.capabilities[CapabilityCodes.p2pPaymentDestination]\r\n      .replace('{alias}', alias).replace('{domain.tld}', domain)\r\n    return url\r\n  }\r\n\r\n  async domainHasCapability (aDomain, capability) {\r\n    const apiDescriptor = await this.getApiDescriptionFor(aDomain)\r\n    return !!apiDescriptor.capabilities[capability]\r\n  }\r\n\r\n  async getApiDescriptionFor (aDomain) {\r\n    if (this._cache[aDomain]) {\r\n      return this._cache[aDomain]\r\n    }\r\n    const { domain, port } = await this.getWellKnownBaseUrl(aDomain)\r\n    const apiDescriptor = this.fetchApiDescriptor(domain, port)\r\n    this._cache[aDomain] = apiDescriptor\r\n    return apiDescriptor\r\n  }\r\n\r\n  async fetchApiDescriptor (domain, port) {\r\n    const protocol = (domain === 'localhost' || domain === 'localhost.') ? 'http' : 'https'\r\n    const requestPort = port.toString() === '443' ? '' : `:${port}`\r\n    const requestDomain = /^(.*?)\\.?$/.exec(domain)[1] // Get value from capture group\r\n    if (!requestDomain) {\r\n      throw new Error(`Invalid domain: ${domain}`)\r\n    }\r\n    const wellKnown = await this.http.get(`${protocol}://${requestDomain}${requestPort}/.well-known/bsvalias`)\r\n    const apiDescriptor = await wellKnown.json()\r\n    return apiDescriptor\r\n  }\r\n\r\n  async getWellKnownBaseUrl (aDomain) {\r\n    return this.dnsClient.checkSrv(aDomain)\r\n  }\r\n\r\n  async ensureCapabilityFor (aDomain, aCapability) {\r\n    if (!await this.domainHasCapability(aDomain, aCapability)) {\r\n      throw new Error(`Unknown capability \"${aCapability}\" for \"${aDomain}\"`)\r\n    }\r\n  }\r\n}\r\n\r\nexport { EndpointResolver }\r\n","class VerifiableMessage {\r\n  constructor (parts, bsv = null) {\r\n    if (bsv === null) {\r\n      bsv = require('bsv')\r\n      bsv.Message = require('bsv/message')\r\n    }\r\n    this.bsv = bsv\r\n    const concatenated = Buffer.from(parts.join(''))\r\n    this.message = new this.bsv.Message(concatenated)\r\n  }\r\n\r\n  static forBasicAddressResolution ({\r\n    senderHandle,\r\n    amount,\r\n    dt,\r\n    purpose\r\n  }) {\r\n    if (dt.toISOString) {\r\n      dt = dt.toISOString()\r\n    }\r\n\r\n    return new VerifiableMessage([\r\n      senderHandle,\r\n      amount || '0',\r\n      dt,\r\n      purpose\r\n    ])\r\n  }\r\n\r\n  sign (wifPrivateKey) {\r\n    return this.message.sign(this.bsv.PrivateKey.fromWIF(wifPrivateKey))\r\n  }\r\n\r\n  verify (keyAddress, signature) {\r\n    return this.message.verify(keyAddress, signature)\r\n  }\r\n}\r\n\r\nexport { VerifiableMessage }\r\n","import { VerifiableMessage } from './VerifiableMessage'\r\n\r\nclass RequestBodyFactory {\r\n  constructor (clock) {\r\n    this.clock = clock\r\n  }\r\n  buildBodyToRequestAddress (senderInfo, privateKey = null) {\r\n    const {\r\n      senderHandle,\r\n      amount,\r\n      senderName,\r\n      purpose,\r\n      pubkey,\r\n      signature: providedSignature\r\n    } = senderInfo\r\n\r\n    if (!providedSignature && privateKey === null) {\r\n      throw new Error('Missing private key or signature')\r\n    }\r\n\r\n    let dt, signature\r\n    if (providedSignature) {\r\n      if (!senderInfo.dt) {\r\n        throw new Error('missing datetime for given signature')\r\n      }\r\n      dt = senderInfo.dt\r\n      signature = providedSignature\r\n    } else {\r\n      dt = this.clock.now()\r\n      signature = VerifiableMessage.forBasicAddressResolution({\r\n        senderHandle,\r\n        amount,\r\n        dt,\r\n        purpose\r\n      }).sign(privateKey)\r\n    }\r\n\r\n    return {\r\n      senderHandle,\r\n      senderName,\r\n      purpose,\r\n      dt,\r\n      amount: amount || null,\r\n      pubkey,\r\n      signature\r\n    }\r\n  }\r\n\r\n  buildBodySendTx (hexTransaction, reference, metadata) {\r\n    return { hex: hexTransaction, metadata, reference }\r\n  }\r\n\r\n  buildBodyP2pPaymentDestination (satoshis) {\r\n    return { satoshis }\r\n  }\r\n}\r\n\r\nexport { RequestBodyFactory }\r\n","import moment from 'moment'\r\n\r\nclass Clock {\r\n  now () {\r\n    return moment()\r\n  }\r\n}\r\n\r\nexport { Clock }\r\n","class PaymailNotFound extends Error {\r\n  constructor (message, paymail) {\r\n    super(message)\r\n    this.paymail = paymail\r\n  }\r\n}\r\n\r\nexport { PaymailNotFound }\r\n","import { DnsOverHttps } from './dns-over-https'\r\n\r\nclass BrowserDns {\r\n  constructor (fetch) {\r\n    this.doh = new DnsOverHttps(fetch, { baseUrl: 'https://dns.google.com/resolve' })\r\n  }\r\n\r\n  async resolveSrv (aDomain, aCallback) {\r\n    try {\r\n      const response = await this.doh.resolveSrv(aDomain)\r\n      if (response.Status === 0 && response.Answer) {\r\n        const data = response.Answer.map(record => {\r\n          const [ priority, weight, port, name ] = record.data.split(' ')\r\n          return {\r\n            priority,\r\n            weight,\r\n            port,\r\n            name,\r\n            isSecure: response.AD\r\n          }\r\n        })\r\n        aCallback(null, data)\r\n      } else if (response.Status === 0 && !response.Answer) {\r\n        aCallback({ code: 'ENODATA' })\r\n      } else {\r\n        aCallback(new Error('error during dns query'))\r\n      }\r\n    } catch (e) {\r\n      aCallback(e)\r\n    }\r\n  }\r\n}\r\n\r\nexport { BrowserDns }\r\n","import { EndpointResolver } from './EndpointResolver'\r\nimport { RequestBodyFactory } from './RequestBodyFactory'\r\nimport { Clock } from './Clock'\r\nimport { PaymailNotFound } from './errors/PaymailNotFound'\r\nimport { CapabilityCodes } from './constants'\r\nimport fetch from 'isomorphic-fetch'\r\nimport { BrowserDns } from './BrowserDns'\r\nimport { Http } from './http'\r\n\r\nclass PaymailClient {\r\n  constructor (dns = null, fetch2 = null, clock = null, bsv = null) {\r\n    if (fetch2 === null) {\r\n      fetch2 = fetch\r\n    }\r\n    if (dns === null) {\r\n      dns = new BrowserDns(fetch2)\r\n    }\r\n    if (bsv === null) {\r\n      bsv = require('bsv')\r\n    }\r\n    this.bsv = bsv\r\n    this.resolver = new EndpointResolver(dns, fetch2)\r\n    this.http = new Http(fetch2)\r\n    this.requestBodyFactory = new RequestBodyFactory(clock !== null ? clock : new Clock())\r\n  }\r\n\r\n  /**\r\n   * Uses pki flow to query for an identity key for a given paymail address.\r\n   *\r\n   * @param {String} paymail - a paymail address\r\n   */\r\n  async getPublicKey (paymail) {\r\n    const identityUrl = await this.resolver.getIdentityUrlFor(paymail)\r\n    const response = await this.http.get(identityUrl)\r\n    const { pubkey } = await response.json()\r\n    return pubkey\r\n  }\r\n\r\n  /**\r\n   * Uses `Basic Address Resolution` flow to query for a payment for output for the\r\n   * given paymail address.\r\n   *\r\n   * @param {String} aPaymail - a paymail address\r\n   * @param {Object} senderInfo - Object containing sender info\r\n   * @param {String} senderInfo.senderHandle - Sender paymail address\r\n   * @param {String} senderInfo.amount - Optional. Required amount.\r\n   * @param {String} senderInfo.senderName - Optional. Sender name.\r\n   * @param {String} senderInfo.purpose - Optional. Purpose of the payment.\r\n   * @param {String} senderInfo.pubkey - Optional. Public key used to sign the message.\r\n   * @param {String} senderInfo.signature - Optional. Valid signature according to paymail specification.\r\n   * @param {String} privateKey - Optional. private key to sign the request.\r\n   */\r\n  async getOutputFor (aPaymail, senderInfo, privateKey = null) {\r\n    const addressUrl = await this.resolver.getAddressUrlFor(aPaymail)\r\n    const response = await this.http.postJson(\r\n      addressUrl,\r\n      this.requestBodyFactory.buildBodyToRequestAddress(senderInfo, privateKey)\r\n    )\r\n    if (!response.ok) {\r\n      throw new PaymailNotFound(`Paymail not found: ${aPaymail}`, aPaymail)\r\n    }\r\n    const { output } = await response.json()\r\n    return output\r\n  }\r\n\r\n  /**\r\n   * Verify if the given public address belongs to the given\r\n   * paymail address.\r\n   *\r\n   * @param {String} pubkey - Public key to check.\r\n   * @param {String} paymail - a paymail address\r\n   */\r\n  async verifyPubkeyOwner (pubkey, paymail) {\r\n    const url = await this.resolver.getVerifyUrlFor(paymail, pubkey)\r\n    const response = await this.http.get(url)\r\n    const body = await response.json()\r\n    const { match } = body\r\n    return match\r\n  }\r\n\r\n  /**\r\n   * Verifies if a given signature is valid for a given message. It uses\r\n   * different strategies depending on the capabilities of the server\r\n   * and the parameters Given. The priority order is.\r\n   * - If paymail is not provided, then normal signature verification is performed.\r\n   * - Use provided key (and check that belongs to given paymail address).\r\n   * - Get a new pubkey for given paymail address using pki.\r\n   * - If there is no way to intereact with the owner of the domain to verify the public key it returns false.\r\n   *\r\n   * @param {Message} message - Message to verify\r\n   * @param {String} signature - Signature\r\n   * @param {String} paymail - Signature owner paymail\r\n   * @param {String} pubkey - Optional. Public key that validates the signature.\r\n   */\r\n  async isValidSignature (message, signature, paymail = null, pubkey = null) {\r\n    if (paymail == null && pubkey === null) {\r\n      throw new Error('Must specify either paymail or pubkey')\r\n    }\r\n    let senderPublicKey\r\n    if (paymail) {\r\n      if (pubkey && await this.resolver.domainHasCapability(paymail.split('@')[1], CapabilityCodes.verifyPublicKeyOwner)) {\r\n        if (await this.verifyPubkeyOwner(pubkey, paymail)) {\r\n          senderPublicKey = this.bsv.PublicKey.fromString(pubkey)\r\n        } else {\r\n          return false\r\n        }\r\n      } else {\r\n        const hasPki = await this.resolver.domainHasCapability(paymail.split('@')[1], CapabilityCodes.pki)\r\n        if (hasPki) {\r\n          const identityKey = await this.getPublicKey(paymail)\r\n          senderPublicKey = this.bsv.PublicKey.fromString(identityKey)\r\n        } else {\r\n          return false\r\n        }\r\n      }\r\n    }\r\n\r\n    const senderKeyAddress = this.bsv.Address.fromPublicKey(senderPublicKey || pubkey)\r\n    try {\r\n      const verified = message.verify(senderKeyAddress.toString(), signature)\r\n      return verified\r\n    } catch (err) {\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the public profile information using the \"Public Profile\" protocol.\r\n   *\r\n   * @param {String} paymail - a paymail address\r\n   * @param {String} s - the preferred size of the image\r\n   */\r\n  async getPublicProfile (paymail) {\r\n    let publicProfileUrl = await this.resolver.getPublicProfileUrlFor(paymail)\r\n    const response = await this.http.get(publicProfileUrl)\r\n    if (!response.ok) {\r\n      const body = await response.json()\r\n      throw new Error(`Server failed with: ${JSON.stringify(body)}`)\r\n    }\r\n    const { avatar, name } = await response.json()\r\n    return { avatar, name }\r\n  }\r\n\r\n  async sendRawTx (targetPaymail, hexTransaction, reference, metadata = {}) {\r\n    if (!hexTransaction) {\r\n      throw new Error('transaction hex cannot be empty')\r\n    }\r\n    let receiveTxUrl = await this.resolver.getSendTxUrlFor(targetPaymail)\r\n    const response = await this.http.postJson(\r\n      receiveTxUrl,\r\n      this.requestBodyFactory.buildBodySendTx(hexTransaction, reference, metadata)\r\n    )\r\n    if (!response.ok) {\r\n      const body = await response.json()\r\n      throw new Error(`Server failed with: ${JSON.stringify(body)}`)\r\n    }\r\n    return response.json()\r\n  }\r\n\r\n  async getP2pPaymentDestination (targetPaymail, satoshis) {\r\n    if (!satoshis) {\r\n      throw new Error('Amount in satohis needs to be specified')\r\n    }\r\n    let paymentDestinationUrl = await this.resolver.getP2pPatmentDestinationUrlFor(targetPaymail)\r\n    const response = await this.http.postJson(\r\n      paymentDestinationUrl,\r\n      this.requestBodyFactory.buildBodyP2pPaymentDestination(satoshis)\r\n    )\r\n    if (!response.ok) {\r\n      const body = await response.json()\r\n      throw new Error(`Server failed with: ${JSON.stringify(body)}`)\r\n    }\r\n\r\n    const body = await response.json()\r\n    if (!body.outputs) {\r\n      throw new Error('Server answered with a wrong format. Missing outputs')\r\n    }\r\n\r\n    return body\r\n  }\r\n}\r\n\r\nexport { PaymailClient }\r\n"],"names":["bsv","require","console","log","brfc","title","authors","version","autorString","join","trim","stringToHash","toString","hash","crypto","Hash","sha256sha256","Buffer","from","reverse","substring","CapabilityCodes","pki","paymentDestination","requestSenderValidation","verifyPublicKeyOwner","publicProfile","receiveTransaction","p2pPaymentDestination","DnsClient","constructor","dns","doh","checkSrv","aDomain","Promise","resolve","reject","resolveSrv","err","result","code","domain","port","isSecure","name","domainFromDns","checkDomainIsSecure","then","validateDnssec","error","srvResponseDomain","originalDomain","domainsAreEqual","responseIsWwwSubdomain","isHandcashDomain","isHandcashInternalDomain","isMoneyButtonDomain","dnsResponse","queryBsvaliasDomain","Status","Answer","Error","data","split","responseDomain","AD","domain1","domain2","replace","DnsOverHttps","fetch","config","response","baseUrl","body","json","Http","get","url","_basicRequest","postJson","method","headers","JSON","stringify","options","controller","AbortController","timer","setTimeout","abort","credentials","signal","clearTimeout","EndpointResolver","dnsClient","http","_cache","create","instance","getIdentityUrlFor","aPaymail","alias","ensureCapabilityFor","apiDescriptor","getApiDescriptionFor","identityUrl","capabilities","getAddressUrlFor","addressUrl","getVerifyUrlFor","aPubkey","getPublicProfileUrlFor","getSendTxUrlFor","getP2pPatmentDestinationUrlFor","domainHasCapability","capability","getWellKnownBaseUrl","fetchApiDescriptor","protocol","requestPort","requestDomain","exec","wellKnown","aCapability","VerifiableMessage","parts","Message","concatenated","message","forBasicAddressResolution","senderHandle","amount","dt","purpose","toISOString","sign","wifPrivateKey","PrivateKey","fromWIF","verify","keyAddress","signature","RequestBodyFactory","clock","buildBodyToRequestAddress","senderInfo","privateKey","senderName","pubkey","providedSignature","now","buildBodySendTx","hexTransaction","reference","metadata","hex","buildBodyP2pPaymentDestination","satoshis","Clock","moment","PaymailNotFound","paymail","BrowserDns","aCallback","map","record","priority","weight","e","PaymailClient","fetch2","resolver","requestBodyFactory","getPublicKey","getOutputFor","ok","output","verifyPubkeyOwner","match","isValidSignature","senderPublicKey","PublicKey","fromString","hasPki","identityKey","senderKeyAddress","Address","fromPublicKey","verified","getPublicProfile","publicProfileUrl","avatar","sendRawTx","targetPaymail","receiveTxUrl","getP2pPaymentDestination","paymentDestinationUrl","outputs"],"mappings":"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"}